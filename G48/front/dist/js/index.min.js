function UpdateData(){this.maskWrapper=jQuery(".mask-wrapper")}function QueryBtn(){this.queryBtn=jQuery("#btn-search")}UpdateData.prototype.listenShowHideEvent=function(){jQuery("#submit-local").click(function(e){e.preventDefault(),window.svn_config=!0,jQuery("#progress-group").hide(),jQuery("#not-found").hide();var r=jQuery("#project-name").val().trim();jQuery(".project-name").text(r);console.log("test");var u=new WebSocket("ws://127.0.0.1:9005/");try{u.onopen=function(e){var r=jQuery("#project-name").val().trim(),o=jQuery("#svn-host").val().trim(),t=jQuery("#git-username").val().trim(),n=jQuery("#git-password").val().trim(),s=jQuery("#svn-save").val().trim();if(""!==r&&""!==o&&""!==t&&""!==n&&""!=s){var i={type:"svnUpdate",name:r,host:o,username:t,password:n,localRoad:s},a=JSON.stringify(i);u.send(a),jQuery("#myModal").modal("hide"),jQuery("#modal_info").show()}else alert("必填项不能为空！")},u.onmessage=function(e){if("string"==typeof e.data){var r=JSON.parse(e.data).type;if("path_error"===r)return alert("保存路径不存在！"),void u.close();if("svn_config_success"===r)return alert("svn配置成功"),void u.close()}}}catch(e){log(e)}})},UpdateData.prototype.run=function(){this.listenShowHideEvent()},$(function(){(new UpdateData).run()}),QueryBtn.prototype.listenClickEnterEvent=function(){var r=this;r.queryBtn.click(function(){r.connectionEvent()}),r.queryBtn.keypress(function(e){13==e.keyCode&&r.connectionEvent()})},QueryBtn.prototype.connectionEvent=function(){jQuery("#update-progress-group").hide(),jQuery("#show_error_info").hide(),jQuery("#modal_info").hide();var s=new WebSocket("ws://127.0.0.1:9005/");jQuery("#progress-group").show();var i=jQuery("#progressbar");i.css({width:0}),i.text("0.0% Complete (success)");var e=jQuery("#show_excel");jQuery("#not-found").hide(),e.html("");try{s.onopen=function(e){var r=new Object;if(r.type="queryInfo",r.keyword=jQuery("#inputKeyword").val(),0!==r.keyword.length){console.log("not empyt"),r.queryMode=jQuery("#select-type").val(),r.tableType=jQuery("#table-type1").val(),r.selectScope=jQuery("#select-scope").val();var o=JSON.stringify(r);s.send(o)}else console.log("empty")},s.onmessage=function(e){if("string"==typeof e.data){var r=JSON.parse(e.data),o=r.type;if("not_found"===o&&(console.log("未找到相关检索，通信正常关闭"),s.close(),jQuery("#not-found").show()),"more_data"===o&&(console.log("more_data"),alert("关键字检索范围过大，请进一步细化关键字"),s.close()),"query_finish"===o&&(console.log("正常通信关闭"),s.close()),"progressbar"===o&&(console.log("progressbar"),i.text(r.value+"% Complete (success)"),i.width(r.value+"%")),"query_result"==o){console.log("查询结果");var t=r.datas,n=template("query-item",{datas:t});jQuery("#show_excel").append(n)}}}}catch(e){log(e)}},QueryBtn.prototype.run=function(){this.listenClickEnterEvent()},$(function(){window.svn_config=!1;var r=new QueryBtn;r.run(),jQuery("#inputKeyword").keypress(function(e){13==e.keyCode&&r.connectionEvent()}),jQuery("#reset-search").click(function(){jQuery(".form-horizontal")[0].reset()}),jQuery("#update").click(function(){var i=jQuery("#show_error_info");i.find("li").remove();var e=jQuery("#show_excel");jQuery("#not-found").hide(),jQuery("#progress-group").hide(),jQuery("#circle-progress-info").show(),e.html("");var a=new WebSocket("ws://127.0.0.1:9005/"),r=new Object;r.type="update_request";var o=JSON.stringify(r);try{a.onopen=function(){a.send(o)},a.onmessage=function(e){if("string"==typeof e.data){var r=JSON.parse(e.data),o=r.type;if("svn_config_needing"===o)return jQuery("#circle-progress-info").hide(),void alert("请先配置！！！！！");if("path_error"===o&&(alert("保存路径不存在！"),a.close()),"badFiles"===o&&(a.close(),console.log("show badFiles")),"update_files"===o){jQuery("#circle-progress-info").hide(),jQuery("#update-progress-group").show(),jQuery("#update-progress-group").show();var t=jQuery("#update-progressbar");if(t.width(r.finish_precent),t.text("已更新:"+r.finish_precent),r.bad_file_info.file_name){i.show();var n=r.bad_file_info.error_type,s=r.bad_file_info.file_name;switch(n){case"BadZipfile":jQuery("#BadZipFile").show(),jQuery("#show_BadZipFile_files").append("<li>"+s+"</li>");break;case"TypeError":jQuery("#TypeError").show(),jQuery("#show_TypeError_files").append("<li>"+s+"</li>");break;case"IOError":jQuery("#IOError").show(),jQuery("#show_IOError_files").append("<li>"+s+"</li>")}}}"load_data_finish"===o&&a.close()}}}catch(e){log(e)}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
