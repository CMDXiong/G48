function UpdateData(){this.maskWrapper=jQuery(".mask-wrapper")}function QueryBtn(){this.queryBtn=jQuery("#btn-search")}UpdateData.prototype.showEvent=function(){this.maskWrapper.show()},UpdateData.prototype.hideEvent=function(){},UpdateData.prototype.onopen=function(){var e={type:"svnUpdate",name:jQuery("#project-name").val().trim(),host:jQuery("#svn-host").val().trim(),username:jQuery("#git-username").val().trim(),password:jQuery("#git-password").val().trim(),localRoad:jQuery("#svn-save").val().trim()},t=JSON.stringify(e);window.socket.send(t),jQuery("#myModal").modal("hide"),jQuery("#modal_info").show()},UpdateData.prototype.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;if("not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"update_files"===o){console.log(t.finish_precent),jQuery("#update-progress-group").show();var n=jQuery("#update-progressbar");n.width(t.finish_precent),n.text("已更新:"+t.finish_precent);var s=jQuery("#show_error_info"),r=jQuery("#show_error_files");t.filename&&(s.show(),r.append("<li>"+t.filename+"</li>"))}}var a=t.datas,i=template("query-item",{datas:a});jQuery("#show_excel").append(i)}else progress.text(e.data+"% Complete (success)"),progress.css({width:e.data+"%"});else alert("非文本消息")},UpdateData.prototype.listenShowHideEvent=function(){var t=this;jQuery("#submit-local").click(function(e){if(e.preventDefault(),jQuery("#show_error_files").children("li").remove(),jQuery("#progress-group").hide(),jQuery("#not-found").hide(),null==window.socket){window.socket=new WebSocket("ws://10.240.113.164:9005/"),window.socket.onopen=function(e){t.onopen()}}else t.onopen();window.socket.onmessage=function(e){t.onmessage(e)}})},UpdateData.prototype.run=function(){this.listenShowHideEvent()},$(function(){(new UpdateData).run()}),QueryBtn.prototype.listenClickEnterEvent=function(){var t=this;t.queryBtn.click(function(){t.connectionEvent()}),t.queryBtn.keypress(function(e){13==e.keyCode&&t.connectionEvent()})},QueryBtn.prototype.connectionEvent=function(){var n=this;if(jQuery("#update-progress-group").hide(),jQuery("#show_error_info").hide(),jQuery("#modal_info").hide(),null==window.socket){n.socket=new WebSocket("ws://10.240.113.164:9005/"),window.socket=n.socket,jQuery("#progress-group").show(),(r=jQuery("#progressbar")).css({width:0}),r.text("0.0% Complete (success)"),jQuery("#show_excel").html("");try{n.socket.onopen=function(e){var t=new Object;if(t.type="queryInfo",t.keyword=jQuery("#inputKeyword").val(),0!==t.keyword.length){console.log("not empyt"),t.queryMode=jQuery("#select-type").val(),t.tableType=jQuery("#table-type1").val(),t.selectScope=jQuery("#select-scope").val();var o=JSON.stringify(t);n.socket.send(o)}else console.log("empty")},n.socket.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;"not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"badFiles"===o&&console.log("badFiles Test")}var n=t.datas,s=template("query-item",{datas:n});jQuery("#show_excel").append(s)}else r.text(e.data+"% Complete (success)"),r.css({width:e.data+"%"});else alert("非文本消息")},n.socket.onclose=function(e){alert("socket closed!")}}catch(e){log(e)}}else{var r;jQuery("#not-found").hide(),n.socket=window.socket,jQuery("#progress-group").show(),(r=jQuery("#progressbar")).css({width:0}),r.text("0.0% Complete (success)"),jQuery("#show_excel").html("");try{var e=new Object;if(e.type="queryInfo",e.keyword=jQuery("#inputKeyword").val(),0!==e.keyword.length){console.log("not empyt"),e.queryMode=jQuery("#select-type").val(),e.tableType=jQuery("#table-type1").val(),e.selectScope=jQuery("#select-scope").val();var t=JSON.stringify(e);n.socket.send(t)}else console.log("empty");n.socket.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;"not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"badFiles"===o&&console.log("badFiles Test")}var n=t.datas,s=template("query-item",{datas:n});jQuery("#show_excel").append(s)}else r.text(e.data+"% Complete (success)"),r.css({width:e.data+"%"}),console.log(r.width);else alert("非文本消息")},n.socket.onclose=function(e){alert("socket closed!")}}catch(e){log(e)}}},QueryBtn.prototype.run=function(){this.listenClickEnterEvent()},$(function(){var t=new QueryBtn;t.run(),jQuery("#inputKeyword").keypress(function(e){13==e.keyCode&&t.connectionEvent()}),jQuery("#reset-search").click(function(){jQuery(".form-horizontal")[0].reset()}),window.socket=null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
