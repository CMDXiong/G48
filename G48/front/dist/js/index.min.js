function UpdateData(){this.maskWrapper=jQuery(".mask-wrapper")}function QueryBtn(){this.queryBtn=jQuery("#btn-search")}UpdateData.prototype.showEvent=function(){this.maskWrapper.show()},UpdateData.prototype.hideEvent=function(){},UpdateData.prototype.onopen=function(){var e={type:"svnUpdate",name:jQuery("#project-name").val().trim(),host:jQuery("#svn-host").val().trim(),username:jQuery("#git-username").val().trim(),password:jQuery("#git-password").val().trim(),localRoad:jQuery("#svn-save").val().trim()},t=JSON.stringify(e);window.socket.send(t),jQuery("#myModal").modal("hide"),jQuery("#modal_info").show()},UpdateData.prototype.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;if("not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"finish_data_update"===o&&jQuery("#modal_info").hide(),"update_files"===o){console.log(t.finish_precent),jQuery("#update-progress-group").show();var n=jQuery("#update-progressbar");n.width(t.finish_precent),n.text("已更新:"+t.finish_precent),jQuery("#show_error_info").show();var s=jQuery("#show_error_files");t.filename&&s.append("<li>"+t.filename+"</li>")}}var r=t.datas,a=template("query-item",{datas:r});jQuery("#show_excel").append(a)}else progress.text(e.data+"% Complete (success)"),progress.css({width:e.data+"%"});else alert("非文本消息")},UpdateData.prototype.listenShowHideEvent=function(){var t=this;jQuery("#submit-local").click(function(e){if(e.preventDefault(),jQuery("#show_error_files").children("li").remove(),null==window.socket){window.socket=new WebSocket("ws://10.240.113.164:9005/"),window.socket.onopen=function(e){t.onopen()}}else t.onopen();window.socket.onmessage=function(e){t.onmessage(e)}})},UpdateData.prototype.run=function(){this.listenShowHideEvent()},$(function(){(new UpdateData).run()}),QueryBtn.prototype.listenClickEnterEvent=function(){var t=this;t.queryBtn.click(function(){t.connectionEvent()}),t.queryBtn.keypress(function(e){13==e.keyCode&&t.connectionEvent()})},QueryBtn.prototype.connectionEvent=function(){var n=this;if(jQuery("#update-progress-group").hide(),jQuery("#show_error_info").hide(),jQuery("#modal_info").hide(),null==window.socket){n.socket=new WebSocket("ws://10.240.113.164:9005/"),window.socket=n.socket,jQuery("#progress-group").show(),(r=jQuery("#progressbar")).css({width:0}),r.text("0.0% Complete (success)"),jQuery("#show_excel").html("");try{n.socket.onopen=function(e){var t=new Object;if(t.type="queryInfo",t.keyword=jQuery("#inputKeyword").val(),0!==t.keyword.length){console.log("not empyt"),t.queryMode=jQuery("#select-type").val(),t.tableType=jQuery("#table-type1").val(),t.selectScope=jQuery("#select-scope").val();var o=JSON.stringify(t);n.socket.send(o)}else console.log("empty")},n.socket.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;"not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"badFiles"===o&&console.log("badFiles Test")}var n=t.datas,s=template("query-item",{datas:n});jQuery("#show_excel").append(s)}else r.text(e.data+"% Complete (success)"),r.css({width:e.data+"%"});else alert("非文本消息")},n.socket.onclose=function(e){alert("socket closed!")}}catch(e){log(e)}}else{var r;jQuery("#not-found").hide(),n.socket=window.socket,jQuery("#progress-group").show(),(r=jQuery("#progressbar")).css({width:0}),r.text("0.0% Complete (success)"),jQuery("#show_excel").html("");try{var e=new Object;if(e.type="queryInfo",e.keyword=jQuery("#inputKeyword").val(),0!==e.keyword.length){console.log("not empyt"),e.queryMode=jQuery("#select-type").val(),e.tableType=jQuery("#table-type1").val(),e.selectScope=jQuery("#select-scope").val();var t=JSON.stringify(e);n.socket.send(t)}else console.log("empty");n.socket.onmessage=function(e){if("string"==typeof e.data)if(isNaN(Number(e.data))){var t=JSON.parse(e.data);if("type"in t){var o=t.type;"not_found"===o&&(console.log("not_found"),jQuery("#not-found").show()),"badFiles"===o&&console.log("badFiles Test")}var n=t.datas,s=template("query-item",{datas:n});jQuery("#show_excel").append(s)}else r.text(e.data+"% Complete (success)"),r.css({width:e.data+"%"}),console.log(r.width);else alert("非文本消息")},n.socket.onclose=function(e){alert("socket closed!")}}catch(e){log(e)}}},QueryBtn.prototype.run=function(){this.listenClickEnterEvent()},$(function(){var t=new QueryBtn;t.run(),jQuery("#inputKeyword").keypress(function(e){13==e.keyCode&&t.connectionEvent()}),jQuery("#reset-search").click(function(){jQuery(".form-horizontal")[0].reset()}),window.socket=null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlVwZGF0ZURhdGEiLCJ0aGlzIiwibWFza1dyYXBwZXIiLCJqUXVlcnkiLCJRdWVyeUJ0biIsInF1ZXJ5QnRuIiwicHJvdG90eXBlIiwic2hvd0V2ZW50Iiwic2hvdyIsImhpZGVFdmVudCIsIm9ub3BlbiIsImRhdGEiLCJ0eXBlIiwibmFtZSIsInZhbCIsInRyaW0iLCJob3N0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImxvY2FsUm9hZCIsImpzb25RdWVyeUluZm8iLCJKU09OIiwic3RyaW5naWZ5Iiwid2luZG93Iiwic29ja2V0Iiwic2VuZCIsIm1vZGFsIiwib25tZXNzYWdlIiwibXNnIiwiaXNOYU4iLCJOdW1iZXIiLCJqc29uX29iaiIsInBhcnNlIiwiY29uc29sZSIsImxvZyIsImhpZGUiLCJ1cGRhdGVfcHJvZ3Jlc3NiYXIiLCJ3aWR0aCIsInRleHQiLCJzaG93X2Vycm9yX2ZpbGUiLCJhcHBlbmQiLCJkYXRhcyIsImh0bWwiLCJ0ZW1wbGF0ZSIsInByb2dyZXNzIiwiY3NzIiwiYWxlcnQiLCJsaXN0ZW5TaG93SGlkZUV2ZW50Iiwic2VsZiIsImNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2hpbGRyZW4iLCJyZW1vdmUiLCJXZWJTb2NrZXQiLCJydW4iLCIkIiwibGlzdGVuQ2xpY2tFbnRlckV2ZW50IiwiY29ubmVjdGlvbkV2ZW50Iiwia2V5cHJlc3MiLCJrZXlDb2RlIiwicXVlcnlJbmZvIiwiT2JqZWN0Iiwia2V5d29yZCIsImxlbmd0aCIsInF1ZXJ5TW9kZSIsInRhYmxlVHlwZSIsInNlbGVjdFNjb3BlIiwib25jbG9zZSIsImV4IiwicXVlcnlCdG5PaiIsInJlc2V0Il0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTQSxhQUNNQyxLQUNOQyxZQUFjQyxPQUFPLGlCQXNJOUIsU0FBU0MsV0FDTUgsS0FDTkksU0FBV0YsT0FBTyxlQXJJM0JILFdBQVdNLFVBQVVDLFVBQVksV0FDbEJOLEtBQ05DLFlBQVlN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SXpCUyxNQUFNLFVBSWRFLEVBQUt4QixPQUFPNEMsUUFBVSxTQUFVeEMsR0FBT2tCLE1BQU0sbUJBRWpELE1BQU91QixHQUNIbkMsSUFBSW1DLE1BS2hCakUsU0FBU0UsVUFBVWlELElBQU0sV0FDVnRELEtBQ053RCx5QkFHVEQsRUFBRSxXQUNFLElBQUljLEVBQWEsSUFBSWxFLFNBQ3JCa0UsRUFBV2YsTUFDUXBELE9BQU8saUJBQ2J3RCxTQUFTLFNBQVVULEdBQ1gsSUFBYkEsRUFBRVUsU0FDRlUsRUFBV1osb0JBRW5CdkQsT0FBTyxpQkFBaUI4QyxNQUFNLFdBQzFCOUMsT0FBTyxvQkFBb0IsR0FBR29FLFVBR2xDaEQsT0FBT0MsT0FBUyIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZnVuY3Rpb24gVXBkYXRlRGF0YSgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHNlbGYubWFza1dyYXBwZXIgPSBqUXVlcnkoJy5tYXNrLXdyYXBwZXInKTtcclxufVxyXG5cclxuVXBkYXRlRGF0YS5wcm90b3R5cGUuc2hvd0V2ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1hc2tXcmFwcGVyLnNob3coKTtcclxufTtcclxuXHJcblVwZGF0ZURhdGEucHJvdG90eXBlLmhpZGVFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG59O1xyXG5cclxuVXBkYXRlRGF0YS5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHByak5hbWUgPSBqUXVlcnkoXCIjcHJvamVjdC1uYW1lXCIpLnZhbCgpLnRyaW0oKTtcclxuICAgIHZhciBzdm5Ib3N0ID0galF1ZXJ5KFwiI3N2bi1ob3N0XCIpLnZhbCgpLnRyaW0oKTtcclxuICAgIHZhciB1c2VyICAgID0galF1ZXJ5KFwiI2dpdC11c2VybmFtZVwiKS52YWwoKS50cmltKCk7XHJcbiAgICB2YXIgcGFzc3dvcmQgPSBqUXVlcnkoXCIjZ2l0LXBhc3N3b3JkXCIpLnZhbCgpLnRyaW0oKTtcclxuICAgIHZhciBsb2NhbFNhdmVSb2FkID0galF1ZXJ5KFwiI3N2bi1zYXZlXCIpLnZhbCgpLnRyaW0oKTtcclxuXHJcbiAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICB0eXBlOiBcInN2blVwZGF0ZVwiLFxyXG4gICAgICAgIG5hbWU6IHByak5hbWUsXHJcbiAgICAgICAgaG9zdDogc3ZuSG9zdCxcclxuICAgICAgICB1c2VybmFtZTogdXNlcixcclxuICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgbG9jYWxSb2FkOiBsb2NhbFNhdmVSb2FkXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBqc29uUXVlcnlJbmZvID0gIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgd2luZG93LnNvY2tldC5zZW5kKGpzb25RdWVyeUluZm8pO1xyXG4gICAgalF1ZXJ5KFwiI215TW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcclxuICAgIGpRdWVyeShcIiNtb2RhbF9pbmZvXCIpLnNob3coKTtcclxuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbn07XHJcblVwZGF0ZURhdGEucHJvdG90eXBlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKG1zZyl7XHJcbiAgICBpZiAodHlwZW9mIG1zZy5kYXRhID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAgKGlzTmFOKE51bWJlcihtc2cuZGF0YSkpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8g5pi+56S65p+l6K+i57uT5p6c5Luj56CBXHJcbiAgICAgICAgICAgIHZhciBqc29uX29iaiA9IEpTT04ucGFyc2UobXNnLmRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoXCJ0eXBlXCIgaW4ganNvbl9vYmopXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0ganNvbl9vYmpbXCJ0eXBlXCJdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwibm90X2ZvdW5kXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJub3RfZm91bmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KFwiI25vdC1mb3VuZFwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDmmL7npLrplJnor6/mlofku7bnmoTkv6Hmga9cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImJhZEZpbGVzXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHNob3dfZXJyb3JfaW5mbyA9IGpRdWVyeShcIiNzaG93X2Vycm9yX2luZm9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvd19lcnJvcl9pbmZvLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgc2hvd19lcnJvcl9maWxlID0galF1ZXJ5KFwiI3Nob3dfZXJyb3JfZmlsZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGVycm9yX2ZpbGVfbGlzdCA9IGpzb25fb2JqW1wiYmFkRmlsZXNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCBlcnJvcl9maWxlX2xpc3QubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBzaG93X2Vycm9yX2ZpbGUuYXBwZW5kKFwiPGxpPlwiKyBlcnJvcl9maWxlX2xpc3RbaV0gKyBcIjwvbGk+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImZpbmlzaF9kYXRhX3VwZGF0ZVwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShcIiNtb2RhbF9pbmZvXCIpLmhpZGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09PSBcInVwZGF0ZV9maWxlc1wiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb25fb2JqW1wiZmluaXNoX3ByZWNlbnRcIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVfcHJvZ3Jlc3NfZ3JvdXAgPSBqUXVlcnkoXCIjdXBkYXRlLXByb2dyZXNzLWdyb3VwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9wcm9ncmVzc19ncm91cC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZV9wcm9ncmVzc2JhciA9IGpRdWVyeShcIiN1cGRhdGUtcHJvZ3Jlc3NiYXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlX3Byb2dyZXNzYmFyLndpZHRoKGpzb25fb2JqW1wiZmluaXNoX3ByZWNlbnRcIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9wcm9ncmVzc2Jhci50ZXh0KFwi5bey5pu05pawOlwiICsganNvbl9vYmpbXCJmaW5pc2hfcHJlY2VudFwiXSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2hvd19lcnJvcl9pbmZvID0galF1ZXJ5KFwiI3Nob3dfZXJyb3JfaW5mb1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2Vycm9yX2luZm8uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaG93X2Vycm9yX2ZpbGUgPSBqUXVlcnkoXCIjc2hvd19lcnJvcl9maWxlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoanNvbl9vYmpbXCJmaWxlbmFtZVwiXSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dfZXJyb3JfZmlsZS5hcHBlbmQoXCI8bGk+XCIrIGpzb25fb2JqW1wiZmlsZW5hbWVcIl0gKyBcIjwvbGk+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDmnInmlbDmja5cclxuICAgICAgICAgICAgdmFyIGRhdGFzID0ganNvbl9vYmpbXCJkYXRhc1wiXTtcclxuICAgICAgICAgICAgdmFyIGh0bWwgPSB0ZW1wbGF0ZSgncXVlcnktaXRlbScse1wiZGF0YXNcIjogZGF0YXN9KTtcclxuICAgICAgICAgICAgdmFyIHNob3dfZXhjZWwgPSBqUXVlcnkoXCIjc2hvd19leGNlbFwiKTtcclxuICAgICAgICAgICAgc2hvd19leGNlbC5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIC8vIHsj6L+b5bqm5p2h55qE5Luj56CBI31cclxuICAgICAgICAgICAgLy8gdmFyIHByb2dyZXNzID0galF1ZXJ5KFwiI3Byb2dyZXNzYmFyXCIpXHJcbiAgICAgICAgICAgIHByb2dyZXNzLnRleHQobXNnLmRhdGEgKyAgJyUgQ29tcGxldGUgKHN1Y2Nlc3MpJyk7XHJcbiAgICAgICAgICAgIHByb2dyZXNzLmNzcyh7XCJ3aWR0aFwiOiBtc2cuZGF0YSArICclJ30pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFsZXJ0KFwi6Z2e5paH5pys5raI5oGvXCIpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuVXBkYXRlRGF0YS5wcm90b3R5cGUubGlzdGVuU2hvd0hpZGVFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHN1Ym1pdExvY2FsID0gIGpRdWVyeSgnI3N1Ym1pdC1sb2NhbCcpO1xyXG4gICAgc3VibWl0TG9jYWwuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHNob3dfZXJyb3JfZmlsZSA9IGpRdWVyeShcIiNzaG93X2Vycm9yX2ZpbGVzXCIpO1xyXG4gICAgICAgIHNob3dfZXJyb3JfZmlsZS5jaGlsZHJlbignbGknKS5yZW1vdmUoKTtcclxuICAgICAgICBpZiAod2luZG93LnNvY2tldCA9PSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGhvc3QgPSBcIndzOi8vMTAuMjQwLjExMy4xNjQ6OTAwNS9cIjtcclxuICAgICAgICAgICAgd2luZG93LnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoaG9zdCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLm9ub3BlbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuc29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYub25tZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuVXBkYXRlRGF0YS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5saXN0ZW5TaG93SGlkZUV2ZW50KCk7XHJcbn07XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB1cGRhdGUgPSBuZXcgVXBkYXRlRGF0YSgpO1xyXG4gICAgdXBkYXRlLnJ1bigpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIFF1ZXJ5QnRuKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5xdWVyeUJ0biA9IGpRdWVyeShcIiNidG4tc2VhcmNoXCIpO1xyXG59XHJcblxyXG5RdWVyeUJ0bi5wcm90b3R5cGUubGlzdGVuQ2xpY2tFbnRlckV2ZW50ID0gZnVuY3Rpb24gKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLnF1ZXJ5QnRuLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLmNvbm5lY3Rpb25FdmVudCgpO1xyXG4gICAgfSk7XHJcbiAgICBzZWxmLnF1ZXJ5QnRuLmtleXByZXNzKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAxMylcclxuICAgICAgICAgICAgc2VsZi5jb25uZWN0aW9uRXZlbnQoKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuUXVlcnlCdG4ucHJvdG90eXBlLmNvbm5lY3Rpb25FdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGpRdWVyeShcIiN1cGRhdGUtcHJvZ3Jlc3MtZ3JvdXBcIikuaGlkZSgpO1xyXG4gICAgalF1ZXJ5KFwiI3Nob3dfZXJyb3JfaW5mb1wiKS5oaWRlKCk7XHJcbiAgICBqUXVlcnkoXCIjbW9kYWxfaW5mb1wiKS5oaWRlKCk7XHJcbiAgICBpZih3aW5kb3cuc29ja2V0ID09IG51bGwpe1xyXG4gICAgICAgIHZhciBob3N0ID0gXCJ3czovLzEwLjI0MC4xMTMuMTY0OjkwMDUvXCI7XHJcbiAgICAgICAgc2VsZi5zb2NrZXQgPSBuZXcgV2ViU29ja2V0KGhvc3QpO1xyXG4gICAgICAgIHdpbmRvdy5zb2NrZXQgPSBzZWxmLnNvY2tldDtcclxuICAgICAgICBqUXVlcnkoXCIjcHJvZ3Jlc3MtZ3JvdXBcIikuc2hvdygpO1xyXG4gICAgICAgIHZhciBwcm9ncmVzcyA9IGpRdWVyeShcIiNwcm9ncmVzc2JhclwiKVxyXG4gICAgICAgIHByb2dyZXNzLmNzcyh7XCJ3aWR0aFwiOiAwfSk7XHJcbiAgICAgICAgcHJvZ3Jlc3MudGV4dCgnMC4wJSBDb21wbGV0ZSAoc3VjY2VzcyknKTtcclxuICAgICAgICB2YXIgc2hvd19leGNlbCA9IGpRdWVyeShcIiNzaG93X2V4Y2VsXCIpO1xyXG4gICAgICAgIHNob3dfZXhjZWwuaHRtbChcIlwiKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZWxmLnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJbmZvID0gbmV3IE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLnR5cGUgPSBcInF1ZXJ5SW5mb1wiO1xyXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLmtleXdvcmQgPSBqUXVlcnkoXCIjaW5wdXRLZXl3b3JkXCIpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYocXVlcnlJbmZvLmtleXdvcmQubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90IGVtcHl0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5xdWVyeU1vZGUgPSBqUXVlcnkoXCIjc2VsZWN0LXR5cGVcIikudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlJbmZvLnRhYmxlVHlwZSA9IGpRdWVyeShcIiN0YWJsZS10eXBlMVwiKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeUluZm8uc2VsZWN0U2NvcGUgPSBqUXVlcnkoXCIjc2VsZWN0LXNjb3BlXCIpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIganNvblF1ZXJ5SW5mbyA9ICBKU09OLnN0cmluZ2lmeShxdWVyeUluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNlbmQoanNvblF1ZXJ5SW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVtcHR5XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cuZGF0YSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGxheUNvbnRlbnQobXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICAoaXNOYU4oTnVtYmVyKG1zZy5kYXRhKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmmL7npLrmn6Xor6Lnu5Pmnpzku6PnoIFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb25fb2JqID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInR5cGVcIiBpbiBqc29uX29iailcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBqc29uX29ialtcInR5cGVcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJub3RfZm91bmRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vdF9mb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoXCIjbm90LWZvdW5kXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImJhZEZpbGVzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJiYWRGaWxlcyBUZXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOacieaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YXMgPSBqc29uX29ialtcImRhdGFzXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKCdxdWVyeS1pdGVtJyx7XCJkYXRhc1wiOiBkYXRhc30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvd19leGNlbCA9IGpRdWVyeShcIiNzaG93X2V4Y2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93X2V4Y2VsLmFwcGVuZChodG1sKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8geyPov5vluqbmnaHnmoTku6PnoIEjfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgcHJvZ3Jlc3MgPSBqUXVlcnkoXCIjcHJvZ3Jlc3NiYXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MudGV4dChtc2cuZGF0YSArICAnJSBDb21wbGV0ZSAoc3VjY2VzcyknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY3NzKHtcIndpZHRoXCI6IG1zZy5kYXRhICsgJyUnfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCLpnZ7mlofmnKzmtojmga9cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZWxmLnNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKG1zZykgeyBhbGVydChcInNvY2tldCBjbG9zZWQhXCIpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICBsb2coZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1lbHNle1xyXG4gICAgICAgIGpRdWVyeShcIiNub3QtZm91bmRcIikuaGlkZSgpO1xyXG4gICAgICAgIHNlbGYuc29ja2V0ID0gd2luZG93LnNvY2tldDtcclxuICAgICAgICBqUXVlcnkoXCIjcHJvZ3Jlc3MtZ3JvdXBcIikuc2hvdygpO1xyXG4gICAgICAgIHZhciBwcm9ncmVzcyA9IGpRdWVyeShcIiNwcm9ncmVzc2JhclwiKVxyXG4gICAgICAgIHByb2dyZXNzLmNzcyh7XCJ3aWR0aFwiOiAwfSk7XHJcbiAgICAgICAgcHJvZ3Jlc3MudGV4dCgnMC4wJSBDb21wbGV0ZSAoc3VjY2VzcyknKTtcclxuICAgICAgICB2YXIgc2hvd19leGNlbCA9IGpRdWVyeShcIiNzaG93X2V4Y2VsXCIpO1xyXG4gICAgICAgIHNob3dfZXhjZWwuaHRtbChcIlwiKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBzZWxmLnNvY2tldC5vbm9wZW4gPSBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlJbmZvID0gbmV3IE9iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLnR5cGUgPSBcInF1ZXJ5SW5mb1wiO1xyXG4gICAgICAgICAgICAgICAgcXVlcnlJbmZvLmtleXdvcmQgPSBqUXVlcnkoXCIjaW5wdXRLZXl3b3JkXCIpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYocXVlcnlJbmZvLmtleXdvcmQubGVuZ3RoICE9PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm90IGVtcHl0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5SW5mby5xdWVyeU1vZGUgPSBqUXVlcnkoXCIjc2VsZWN0LXR5cGVcIikudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlJbmZvLnRhYmxlVHlwZSA9IGpRdWVyeShcIiN0YWJsZS10eXBlMVwiKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeUluZm8uc2VsZWN0U2NvcGUgPSBqUXVlcnkoXCIjc2VsZWN0LXNjb3BlXCIpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIganNvblF1ZXJ5SW5mbyA9ICBKU09OLnN0cmluZ2lmeShxdWVyeUluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc29ja2V0LnNlbmQoanNvblF1ZXJ5SW5mbyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVtcHR5XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB9O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cuZGF0YSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGxheUNvbnRlbnQobXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICAoaXNOYU4oTnVtYmVyKG1zZy5kYXRhKSkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmmL7npLrmn6Xor6Lnu5Pmnpzku6PnoIFcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb25fb2JqID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInR5cGVcIiBpbiBqc29uX29iailcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBqc29uX29ialtcInR5cGVcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJub3RfZm91bmRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vdF9mb3VuZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoXCIjbm90LWZvdW5kXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImJhZEZpbGVzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJiYWRGaWxlcyBUZXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOacieaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YXMgPSBqc29uX29ialtcImRhdGFzXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRlbXBsYXRlKCdxdWVyeS1pdGVtJyx7XCJkYXRhc1wiOiBkYXRhc30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvd19leGNlbCA9IGpRdWVyeShcIiNzaG93X2V4Y2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93X2V4Y2VsLmFwcGVuZChodG1sKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8geyPov5vluqbmnaHnmoTku6PnoIEjfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgcHJvZ3Jlc3MgPSBqUXVlcnkoXCIjcHJvZ3Jlc3NiYXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MudGV4dChtc2cuZGF0YSArICAnJSBDb21wbGV0ZSAoc3VjY2VzcyknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY3NzKHtcIndpZHRoXCI6IG1zZy5kYXRhICsgJyUnfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2dyZXNzLndpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIumdnuaWh+acrOa2iOaBr1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuc29ja2V0Lm9uY2xvc2UgPSBmdW5jdGlvbiAobXNnKSB7IGFsZXJ0KFwic29ja2V0IGNsb3NlZCFcIikgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIGxvZyhleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuUXVlcnlCdG4ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5saXN0ZW5DbGlja0VudGVyRXZlbnQoKTtcclxufTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHF1ZXJ5QnRuT2ogPSBuZXcgUXVlcnlCdG4oKTtcclxuICAgIHF1ZXJ5QnRuT2oucnVuKCk7XHJcbiAgICB2YXIgaW5wdXRLZXl3b3JkID0galF1ZXJ5KFwiI2lucHV0S2V5d29yZFwiKTtcclxuICAgIGlucHV0S2V5d29yZC5rZXlwcmVzcyhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpXHJcbiAgICAgICAgICAgIHF1ZXJ5QnRuT2ouY29ubmVjdGlvbkV2ZW50KCk7XHJcbiAgICB9KTtcclxuICAgIGpRdWVyeShcIiNyZXNldC1zZWFyY2hcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGpRdWVyeShcIi5mb3JtLWhvcml6b250YWxcIilbMF0ucmVzZXQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdpbmRvdy5zb2NrZXQgPSBudWxsO1xyXG5cclxuICAgIC8vIGpRdWVyeShcIiNzdm4tc2F2ZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCLov5nmmK/kuIDkuKrngrnlh7vkuovku7ZcIik7XHJcbiAgICAvLyAgICAgIHZhciBmaWxlU2F2ZSA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiTVNDb21EbGcuQ29tbW9uRGlhbG9nXCIpO1xyXG4gICAgLy8gICAgIGZpbGVTYXZlLk1heEZpbGVTaXplID0gMTI4O1xyXG4gICAgLy8gICAgIGZpbGVTYXZlLkZpbHRlciA9IFwiKi5ibXBcIjtcclxuICAgIC8vICAgICBmaWxlU2F2ZS5GaWx0ZXJJbmRleCA9IDI7XHJcbiAgICAvLyAgICAgZmlsZVNhdmUuZmlsZU5hbWUgPSBteWRhdGUudG9Mb2NhbGVTdHJpbmcoKS5yZXBsYWNlKFwiIFwiLCBcIlwiKS5yZXBsYWNlKFwi5bm0XCIsIFwiXCIpLnJlcGxhY2UoXCLmnIhcIiwgXCJcIikucmVwbGFjZShcIuaXpVwiLCBcIlwiKS5yZXBsYWNlKHJlZywgXCJcIik7XHJcbiAgICAvLyAgICAgZmlsZVNhdmUuRGlhbG9nVGl0bGUgPSBcIumAieaLqeWbvueJh+WtmOWCqOi3r+W+hFwiO1xyXG4gICAgLy8gICAgIGZpbGVTYXZlLlNob3dTYXZlKCk7XHJcbiAgICAvLyAgICAgdmFyIHBhdGg9ZmlsZVNhdmUuZmlsZU5hbWUrXCIuYm1wXCI7XHJcbiAgICAvLyB9KTtcclxufSk7Il19
